
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Paola
 */
public class practica2 extends javax.swing.JFrame implements TreeSelectionListener {

    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root");
    DefaultTreeModel modelo = new DefaultTreeModel(root);
    ArrayList<archivoproyec> listaproyec = new ArrayList();
    ArrayList<listaarbol> listaarbol = new ArrayList();
    ArrayList<String> listaaux = new ArrayList();
    ArrayList<file> file = new ArrayList();
    DefaultMutableTreeNode nodoSeleccionado = null;
    DefaultMutableTreeNode nodoAux = null;
    String textoAux = "";
    String pathfolder = "";
    String pathprincipal = "";
    String pathAux = "";
    Color colorfondodefault;
    Highlighter hilit;
    Highlighter.HighlightPainter painter;
    //ArrayList<archivoproyec> listain=

    /**
     * Creates new form practica2
     */
    public practica2() {
        //DefaultMutableTreeNode carpeta1 = new DefaultMutableTreeNode("Carpeta 1");
        //DefaultMutableTreeNode archivo1 = new DefaultMutableTreeNode("Archivo 1");
        //modelo.insertNodeInto(carpeta1, root, 0);
        //carpeta1.add(archivo1);

        initComponents();
        jTree2.getSelectionModel().addTreeSelectionListener(this);
        //jTree2.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        contenido = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        txtbuscar = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        txtreemplazo = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        contenido.setColumns(20);
        contenido.setRows(5);
        contenido.setEnabled(false);
        jScrollPane2.setViewportView(contenido);

        jTree2.setModel(modelo);
        jTree2.setRootVisible(false);
        jTree2.setShowsRootHandles(true);
        jScrollPane3.setViewportView(jTree2);

        jButton1.setText("Busqueda");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtbuscar.setEnabled(false);

        jButton2.setText("Reemplazo");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtreemplazo.setEnabled(false);

        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("x");
        jLabel1.setEnabled(false);
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtreemplazo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(txtreemplazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jMenu1.setText("File");

        jMenu3.setText("New");

        jMenuItem3.setText("Project");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Folder");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenu1.add(jMenu3);

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem6.setText("Save");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem9.setText("Save As");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem10.setText("Delete");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem2.setText("Busqueda");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem7.setText("Reemplazo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Merge");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.proyec", "proyec");
        fc.setFileFilter(filtro);
        int opcion = fc.showOpenDialog(jPanel1);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                //Seleccionamos el fichero
                File fichero = fc.getSelectedFile();
                //Ecribe la ruta del fichero seleccionado en el campo de texto
                //textField.setText(fichero.getAbsolutePath());
                System.out.println(fichero.getAbsolutePath());
                pathprincipal = fichero.getAbsolutePath();
                System.out.println(fichero.getName());
                String n[] = fichero.getAbsolutePath().split(fichero.getName());
                pathfolder = n[0];
                //pathfolder = pathfolder.substring(0, pathfolder.length() - 1);
                System.out.println(pathfolder);
                Scanner s = null;
                try {
                    // Leemos el contenido del fichero
                    s = new Scanner(fichero);
                    // Leemos linea a linea el fichero
                    while (s.hasNextLine()) {
                        String linea = s.nextLine(); 	// Guardamos la linea en un String
                        if (!linea.equals("\n") && !linea.equals("")) {
                            transformar(linea);
                        }
                    }
                } catch (Exception ex) {
                    System.out.println("Mensaje: " + ex.getMessage());
                } finally {
                    // Cerramos el fichero tanto si la lectura ha sido correcta o no
                    try {
                        if (s != null) {
                            s.close();
                        }
                    } catch (Exception ex2) {
                        System.out.println("Mensaje 2: " + ex2.getMessage());
                    }
                }

                /*try(FileReader fr=new FileReader(fichero)){
                 String cadena="";
                 int valor=fr.read();
                 System.out.println("1");
                 while(valor!=-1){
                 transformar(String.valueOf(valor));
                 cadena=cadena+(char)valor;
                 System.out.println(cadena);
                 valor=fr.read();
                 }
                 //textArea.setText(cadena);
                 } catch (IOException e1) {
                 e1.printStackTrace();
                 }*/
            } catch (Exception ex) {
                Logger.getLogger(practica2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        /*DefaultMutableTreeNode carpeta1 = new DefaultMutableTreeNode("Carpeta 2");
         DefaultMutableTreeNode archivo1 = new DefaultMutableTreeNode("Archivo 2");
         root.add(carpeta1);
         carpeta1.add(archivo1);
         jTree2.setModel(modelo);*/
        System.out.println(pathfolder);
        hilit = new DefaultHighlighter();
        painter = new DefaultHighlighter.DefaultHighlightPainter(Color.LIGHT_GRAY);
        contenido.setHighlighter(hilit);
        colorfondodefault = txtbuscar.getBackground();
        jButton1.setEnabled(true);
        txtbuscar.setEnabled(true);
        jPanel3.setEnabled(true);
        jLabel1.setEnabled(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        try {
            save(nodoSeleccionado.toString());
            for (int i = 2; i < nodoSeleccionado.getPath().length; i++) {

                pathAux = pathAux + "\\" + nodoSeleccionado.getPath()[i];
            }
            System.out.println(pathfolder + pathAux);
            //pathfolder=pathfolder.substring(0, pathfolder.length() - 2);
            System.out.println(pathfolder);
            try {
                File savefile = new File(pathfolder + pathAux);
                BufferedWriter bw;
                Scanner sf = null;
                if (savefile.exists()) {
                    try {
                        bw = new BufferedWriter(new FileWriter(pathfolder + pathAux));
                        FileWriter fw = new FileWriter(pathfolder + pathAux);
                        fw.write(contenido.getText());
                        fw.close();
                    } catch (Exception e) {
                    }
                }
            } catch (Exception e) {
            }
            pathAux = "";
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        try {
            String tipo = identificador(nodoSeleccionado.toString());
            if (tipo.equals("file")) {
                javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
                jF1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                jF1.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
                jF1.setCurrentDirectory(new File(pathfolder));
                String ruta = "";
                try {
                    if (jF1.showSaveDialog(null) == jF1.APPROVE_OPTION) {
                        ruta = jF1.getSelectedFile().getAbsolutePath();
                        System.out.println(ruta.toString());
                        int n23 = 0;
                        StringTokenizer st12 = new StringTokenizer(pathfolder, "\\");
                        while (st12.hasMoreTokens()) {
                            n23++;
                            System.out.println(st12.nextToken());
                        }
                        System.out.println(n23);
                        String numerow = ruta.toString();
                        String nml = "\\\\";
                        String[] numerosa = numerow.split(nml);
                        String nm = "#";
                        for (int i = n23; i < numerosa.length; i++) {
                            nm = nm + "&" + numerosa[i];
                        }
                        System.out.println(nm);
                        try {
                            File savefile = new File(ruta + ".txt");
                            BufferedWriter bw;
                            Scanner sf = null;
                            if (!savefile.exists()) {
                                try {
                                    bw = new BufferedWriter(new FileWriter(ruta + ".txt"));
                                    FileWriter fw = new FileWriter(ruta + ".txt");
                                    fw.write(contenido.getText());
                                    fw.close();
                                    transformar(nm + ".txt");
                                } catch (Exception e) {
                                }
                            }
                        } catch (Exception e) {
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        buscarTexto();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
        jButton1.setEnabled(false);
        txtbuscar.setEnabled(false);
        jButton2.setEnabled(false);
        txtreemplazo.setEnabled(false);
        jPanel3.setEnabled(false);
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:

        jButton1.setEnabled(false);
        txtbuscar.setEnabled(false);
        jButton2.setEnabled(false);
        txtreemplazo.setEnabled(false);
        jPanel3.setEnabled(false);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            contenido.setText(contenido.getText().replaceAll(txtbuscar.getText(), txtreemplazo.getText()));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:

        txtbuscar.setEnabled(true);
        jButton2.setEnabled(true);
        txtreemplazo.setEnabled(true);
        jPanel3.setEnabled(true);

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        String nm = "#";
        try {
            javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
            //jF1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //jF1.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
            jF1.setCurrentDirectory(new File(pathfolder));
            String ruta = "";
            try {
                if (jF1.showDialog(this, "Guardar") == jF1.APPROVE_OPTION) {
                    ruta = jF1.getSelectedFile().getAbsolutePath();
                    System.out.println(ruta.toString());
                    int n23 = 0;
                    StringTokenizer st12 = new StringTokenizer(pathfolder, "\\");
                    while (st12.hasMoreTokens()) {
                        n23++;
                        System.out.println(st12.nextToken());
                    }
                    System.out.println(n23);
                    String numerow = ruta.toString();
                    String nml = "\\\\";
                    String[] numerosa = numerow.split(nml);
                    for (int i = n23; i < numerosa.length; i++) {
                        nm = nm + "&" + numerosa[i];
                    }
                    System.out.println(nm);
                    try {
                        File savefile = new File(ruta);
                        BufferedWriter bw;
                        Scanner sf = null;
                        if (!savefile.exists()) {
                            try {
                                savefile.mkdir();
                                transformar(nm);
                            } catch (Exception e) {
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } catch (Exception e) {
        }
        File fichero = new File(pathprincipal);
        String m = "";
        Scanner s = null;
        try {
            // Leemos el contenido del fichero
            s = new Scanner(fichero);
            // Leemos linea a linea el fichero
            while (s.hasNextLine()) {
                String linea = s.nextLine(); 	// Guardamos la linea en un String
                m = m + "\n" + linea;
            }
            FileWriter fw;
            BufferedWriter bw;
            try {
                bw = new BufferedWriter(new FileWriter(fichero));
                fw = new FileWriter(fichero);
                fw.write(m + "\n" + nm);
                fw.close();
            } catch (Exception e) {
            }
        } catch (Exception ex) {
            System.out.println("Mensaje: " + ex.getMessage());
        } finally {
            // Cerramos el fichero tanto si la lectura ha sido correcta o no
            try {
                if (s != null) {
                    s.close();
                }
            } catch (Exception ex2) {
                System.out.println("Mensaje 2: " + ex2.getMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        String nm = "#";
        try {
            javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
            //jF1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            jF1.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
            jF1.setCurrentDirectory(new File(pathfolder));
            String ruta = "";
            try {
                if (jF1.showSaveDialog(null) == jF1.APPROVE_OPTION) {
                    ruta = jF1.getSelectedFile().getAbsolutePath();
                    System.out.println(ruta.toString());
                    int n23 = 0;
                    StringTokenizer st12 = new StringTokenizer(pathfolder, "\\");
                    while (st12.hasMoreTokens()) {
                        n23++;
                        System.out.println(st12.nextToken());
                    }
                    System.out.println(n23);
                    String numerow = ruta.toString();
                    String nml = "\\\\";
                    String[] numerosa = numerow.split(nml);
                    for (int i = n23; i < numerosa.length; i++) {
                        nm = nm + "&" + numerosa[i];
                    }
                    System.out.println(nm);
                    try {
                        File savefile = new File(ruta + ".txt");
                        BufferedWriter bw;
                        Scanner sf = null;
                        if (!savefile.exists()) {
                            try {
                                bw = new BufferedWriter(new FileWriter(ruta + ".txt"));
                                FileWriter fw = new FileWriter(ruta + ".txt");
                                fw.close();
                                transformar(nm + ".txt");
                            } catch (Exception e) {
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            File fichero = new File(pathprincipal);
            String m = "";
            Scanner s = null;
            try {
                // Leemos el contenido del fichero
                s = new Scanner(fichero);
                // Leemos linea a linea el fichero
                while (s.hasNextLine()) {
                    String linea = s.nextLine(); 	// Guardamos la linea en un String
                    m = m + "\n" + linea;
                }
                FileWriter fw;
                BufferedWriter bw;
                try {
                    bw = new BufferedWriter(new FileWriter(fichero));
                    fw = new FileWriter(fichero);
                    fw.write(m + "\n" + nm + ".txt");
                    fw.close();
                } catch (Exception e) {
                }
            } catch (Exception ex) {
                System.out.println("Mensaje: " + ex.getMessage());
            } finally {
                // Cerramos el fichero tanto si la lectura ha sido correcta o no
                try {
                    if (s != null) {
                        s.close();
                    }
                } catch (Exception ex2) {
                    System.out.println("Mensaje 2: " + ex2.getMessage());
                }
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        String nm = "#";
        String crear = "";
        try {
            String pathsaux[] = null;
            String pathmerge = "";
            for (int i = 0; i < jTree2.getSelectionPaths().length; i++) {
                pathmerge = jTree2.getSelectionPaths()[i].toString().trim();
                StringTokenizer st1 = new StringTokenizer(pathmerge, "[]");
                while (st1.hasMoreTokens()) {
                    pathmerge = st1.nextToken();
                }
                pathsaux = pathmerge.split(", ");
                System.out.println(pathsaux[pathsaux.length - 1]);
                String filetipo = pathsaux[pathsaux.length - 1];
                String tipo = identificador(filetipo);
                String ru=pathfolder;
                for (int j = 2; j < pathsaux.length; j++) {
                    ru=ru+"\\"+pathsaux[j].trim();
                }
                File faux=new File(ru.trim());
                System.out.println(faux);
                if (tipo.equals("file")) {
                    try {
                        Scanner s= new Scanner(faux);
            // Leemos linea a linea el fichero
            while (s.hasNextLine()) {
                String linea = s.nextLine(); 	// Guardamos la linea en un String
                crear = crear + "\n" + linea;
                System.out.println(crear);
            }
                    } catch (Exception e) {
                    }
                }
            }
            //pathsaux[pathsaux.length-1]=pathsaux[pathsaux.length-1].substring(0, pathsaux.length - 1);
            //System.out.println(pathsaux[pathsaux.length - 1]);
        } catch (Exception e) {
        }
        try {
            javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
            jF1.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            jF1.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
            jF1.setCurrentDirectory(new File(pathfolder));
            String ruta = "";
            try {
                if (jF1.showSaveDialog(null) == jF1.APPROVE_OPTION) {
                    ruta = jF1.getSelectedFile().getAbsolutePath();
                    System.out.println(ruta.toString());
                    int n23 = 0;
                    StringTokenizer st12 = new StringTokenizer(pathfolder, "\\");
                    while (st12.hasMoreTokens()) {
                        n23++;
                        System.out.println(st12.nextToken());
                    }
                    System.out.println(n23);
                    String numerow = ruta.toString();
                    String nml = "\\\\";
                    String[] numerosa = numerow.split(nml);
                    for (int i = n23; i < numerosa.length; i++) {
                        nm = nm + "&" + numerosa[i];
                    }
                    System.out.println(nm);
                    try {
                        File savefile = new File(ruta + ".txt");
                        BufferedWriter bw;
                        Scanner sf = null;
                        if (!savefile.exists()) {
                            try {
                                bw = new BufferedWriter(new FileWriter(ruta + ".txt"));
                                FileWriter fw = new FileWriter(ruta + ".txt");
                                fw.write(crear);
                                fw.close();
                                transformar(nm + ".txt");
                            } catch (Exception e) {
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } catch (Exception e) {
        }
        File fichero = new File(pathprincipal);
        String m = "";
        Scanner s = null;
        try {
            // Leemos el contenido del fichero
            s = new Scanner(fichero);
            // Leemos linea a linea el fichero
            while (s.hasNextLine()) {
                String linea = s.nextLine(); 	// Guardamos la linea en un String
                m = m + "\n" + linea;
            }
            FileWriter fw;
            BufferedWriter bw;
            try {
                bw = new BufferedWriter(new FileWriter(fichero));
                fw = new FileWriter(fichero);
                fw.write(m + "\n" + nm + ".txt");
                fw.close();
            } catch (Exception e) {
            }
        } catch (Exception ex) {
            System.out.println("Mensaje: " + ex.getMessage());
        } finally {
            // Cerramos el fichero tanto si la lectura ha sido correcta o no
            try {
                if (s != null) {
                    s.close();
                }
            } catch (Exception ex2) {
                System.out.println("Mensaje 2: " + ex2.getMessage());
            } }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        String nm = "$";
        try {
            javax.swing.JFileChooser jF1 = new javax.swing.JFileChooser();
            //jF1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            //jF1.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
            //jF1.setCurrentDirectory(new File(pathfolder));
            String ruta = "";
            File fichero;
            String pathfolderaux = "";
            try {
                if (jF1.showDialog(this, "Guardar") == jF1.APPROVE_OPTION) {
                    fichero = jF1.getSelectedFile();
                    ruta = jF1.getSelectedFile().getAbsolutePath();
                    System.out.println(fichero.getAbsolutePath());
                    pathprincipal = fichero.getAbsolutePath() + ".proyec";
                    System.out.println(fichero.getName());
                    String n[] = fichero.getAbsolutePath().split(fichero.getName());
                    pathfolder = n[0];
                    nm = nm + fichero.getName();
                    try {
                        File savefile = new File(pathprincipal);
                        BufferedWriter bw;
                        Scanner sf = null;
                        if (!savefile.exists()) {
                            try {
                                fichero.mkdir();
                                bw = new BufferedWriter(new FileWriter(pathprincipal));
                                transformar(nm);
                            } catch (Exception e) {
                            }
                        }
                    } catch (Exception e) {
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } catch (Exception e) {
        }
        File fichero = new File(pathprincipal);
        String m = "";
        Scanner s = null;
        try {
            // Leemos el contenido del fichero
            s = new Scanner(fichero);
            // Leemos linea a linea el fichero
            while (s.hasNextLine()) {
                String linea = s.nextLine(); 	// Guardamos la linea en un String
                m = m + "\n" + linea;
            }
            FileWriter fw;
            BufferedWriter bw;
            try {
                bw = new BufferedWriter(new FileWriter(fichero));
                fw = new FileWriter(fichero);
                fw.write(m + "\n" + nm);
                fw.close();
            } catch (Exception e) {
            }
        } catch (Exception ex) {
            System.out.println("Mensaje: " + ex.getMessage());
        } finally {
            // Cerramos el fichero tanto si la lectura ha sido correcta o no
            try {
                if (s != null) {
                    s.close();
                }
            } catch (Exception ex2) {
                System.out.println("Mensaje 2: " + ex2.getMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 2; i < nodoSeleccionado.getPath().length; i++) {

                pathAux = pathAux + "\\" + nodoSeleccionado.getPath()[i];
            }
            File fg=new File(pathfolder+pathAux);
            fg.delete();
            DefaultMutableTreeNode node;
    DefaultTreeModel model = (DefaultTreeModel) (jTree2.getModel());
    TreePath[] paths = jTree2.getSelectionPaths();
    for (int i = 0; i < paths.length; i++) {
      node = (DefaultMutableTreeNode) (paths[i].getLastPathComponent());
      model.removeNodeFromParent(node);
    }
        } catch (Exception e) {
        }
        pathAux ="";
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(practica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(practica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(practica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(practica2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                practica2 p = new practica2();
                p.setLocationRelativeTo(null);
                p.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea contenido;
    private javax.swing.JFileChooser fc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree2;
    private javax.swing.JTextField txtbuscar;
    private javax.swing.JTextField txtreemplazo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        nodoSeleccionado = (DefaultMutableTreeNode) jTree2.getLastSelectedPathComponent();
        //System.out.println(nodoSeleccionado.toString());
        if (identificador(nodoSeleccionado.toString()).equals("file")) {
            if (contenido.isEnabled() && !contenido.getText().equals(textoAux)) {
                int seleccion = JOptionPane.showOptionDialog(
                        this,
                        "Existe un documento abierto\n ¿Desea guardarlo?",
                        "Guardar",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, // null para icono por defecto.
                        new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                        "Si");
                if (seleccion == JOptionPane.YES_OPTION) {
                    try {
                        try {

                            for (int i = 2; i < nodoAux.getPath().length; i++) {

                                pathAux = pathAux + "\\" + nodoAux.getPath()[i];
                            }
                            System.out.println(pathfolder + pathAux);
                            //pathfolder=pathfolder.substring(0, pathfolder.length() - 2);
                            System.out.println(pathfolder);
                            try {
                                File savefile = new File(pathfolder + pathAux);
                                BufferedWriter bw;
                                Scanner sf = null;
                                if (savefile.exists()) {
                                    try {
                                        bw = new BufferedWriter(new FileWriter(pathfolder + pathAux));
                                        FileWriter fw = new FileWriter(pathfolder + pathAux);
                                        fw.write(contenido.getText());
                                        fw.close();
                                    } catch (Exception e1) {
                                    }
                                }
                            } catch (Exception e2) {
                            }
                            pathAux = "";

                            save(nodoAux.toString());
                        } catch (Exception e3) {
                        }
                    } catch (Exception en) {
                    }
                }
            }
            contenido.setEnabled(true);
            file f, fset;
            if (!file.isEmpty()) {
                Iterator<file> ite = file.iterator();
                while (ite.hasNext()) {
                    f = ite.next();
                    if (f.name.equalsIgnoreCase(nodoSeleccionado.toString())) {
                        fset = file.get(file.indexOf(f));
                        contenido.setText(fset.getContent());
                        nodoAux = nodoSeleccionado;
                        textoAux = fset.getContent();
                    }
                }
            }
        } else {
            if (contenido.isEnabled() && !contenido.getText().equals(textoAux)) {
                int seleccion = JOptionPane.showOptionDialog(
                        this,
                        "Existe texto abierto\n ¿Desea guardarlo?",
                        "Guardar",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, // null para icono por defecto.
                        new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                        "Si");
                if (seleccion == JOptionPane.YES_OPTION) {
                    try {
                        save(nodoAux.toString());
                    } catch (Exception en) {
                    }
                }
            }

            contenido.setText("");
            contenido.setEnabled(false);
        }
    }

    private void transformar(String valueOf) {
        String s = String.valueOf(valueOf.charAt(0));
        String tipo = "";
        switch (s) {
            case "#":
                StringTokenizer st1 = new StringTokenizer(valueOf, "#&");
                while (st1.hasMoreTokens()) {
                    String savest1 = st1.nextToken();
                    listaaux.add(savest1);
                    pathAux = pathAux + "\\" + savest1;
                }
                System.out.println(pathAux);
                DefaultMutableTreeNode save0 = new DefaultMutableTreeNode(listaaux.get(listaaux.size() - 1));
                tipo = identificador(listaaux.get(listaaux.size() - 1));
                DefaultMutableTreeNode location;
                listaarbol a;
                if (listaaux.size() >= 2) {
                    int index = findposition(listaaux.get(listaaux.size() - 2));
                    if (index > -1) {
                        a = listaarbol.get(index);
                        String tipo1 = tipodecarga(a.getName());
                        if (tipo1.equalsIgnoreCase("folder")) {
                            location = a.getElement();
                            modelo.insertNodeInto(save0, location, 0);
                        } else if (tipo1.equalsIgnoreCase("root")) {
                            location = root;
                            modelo.insertNodeInto(save0, location, 0);
                        } else {
                            location = null;
                        }
                    } else {
                        location = null;
                    }
                } else {
                    a = listaarbol.get(0);
                    //modelo.setRoot(root);
                    location = a.getElement();
                    modelo.insertNodeInto(save0, location, 0);
                }
                listaproyec.add(new archivoproyec(tipo, listaaux.get(listaaux.size() - 1), location));
                listaarbol.add(new listaarbol(save0, listaaux.get(listaaux.size() - 1)));
                System.out.println(tipo + "-" + listaaux.get(listaaux.size() - 1));
                if (tipo.equals("file")) {
                    file.add(new file(listaaux.get(listaaux.size() - 1), ""));
                }
                //listaarbol a=listaarbol.get(0);
                break;
            case "$":
                StringTokenizer st = new StringTokenizer(valueOf, "$");
                String word = st.nextToken();
                DefaultMutableTreeNode save = new DefaultMutableTreeNode(word);
                modelo.insertNodeInto(save, root, 0);
                modelo.setRoot(root);
                listaarbol.add(new listaarbol(save, word));
                listaproyec.add(new archivoproyec("proyect", word, root));
                //root.add(save);
                pathAux = word;
                pathfolder = pathfolder + pathAux;
                pathAux = "";
                System.out.println(root.getChildCount());
                break;
            default:
                break;
        }
        File create = new File(pathfolder + pathAux);
        BufferedWriter bw;
        if (!create.exists()) {
            try {
                if (!tipo.equals("file")) {
                    create.mkdir();
                } else {
                    bw = new BufferedWriter(new FileWriter(pathfolder + pathAux));
                }
            } catch (Exception e) {
            }
        } else {
            if (tipo.equals("file")) {

                Scanner ss = null;
                String show = null;
                try {
                    // Leemos el contenido del fichero
                    ss = new Scanner(create);
                    // Leemos linea a linea el fichero
                    while (ss.hasNextLine()) {
                        String linea = ss.nextLine(); 	// Guardamos la linea en un String
                        if (show == null) {
                            show = linea;
                        } else {
                            show = show + "\n" + linea;           // Imprimimos la linea
                        }
                    }

                } catch (Exception ex) {
                    System.out.println("Mensaje: " + ex.getMessage());
                } finally {
                    // Cerramos el fichero tanto si la lectura ha sido correcta o no
                    try {
                        if (ss != null) {
                            ss.close();
                        }
                    } catch (Exception ex2) {
                        System.out.println("Mensaje 2: " + ex2.getMessage());
                    }
                }
                int indexread = findfile(listaaux.get(listaaux.size() - 1));
                if (indexread != -1) {
                    file fileupload = file.get(indexread);
                    file.set(indexread, new file(fileupload.getName(), show));
                }
            }
        }
        pathAux = "";
        listaaux.clear();
    }

    private String identificador(String get) {
        String n[] = get.split(".+txt");
        if (n.length == 0) {
            return "file";
        } else {
            return "folder";
        }
    }

    private int findposition(String get) {
        int index = -1;
        listaarbol a;
        if (!listaarbol.isEmpty()) {
            Iterator<listaarbol> ite = listaarbol.iterator();
            while (ite.hasNext()) {
                a = ite.next();
                if (a.getName().equalsIgnoreCase(get)) {
                    index = listaarbol.indexOf(a);
                }
            }
        }
        System.out.println("posicion: " + index);
        return index;
    }
     private int findpositionb(String get) {
        int index = -1;
        listaarbol a;
        if (!listaarbol.isEmpty()) {
            Iterator<listaarbol> ite = listaarbol.iterator();
            while (ite.hasNext()) {
                a = ite.next();
                if (a.getElement().toString().equalsIgnoreCase(get)) {
                    index = listaarbol.indexOf(a);
                }
            }
        }
        System.out.println("posicion: " + index);
        return index;
    }
    private String tipodecarga(String element) {
        archivoproyec p;
        String tipo = "";
        Iterator<archivoproyec> ite = listaproyec.iterator();
        while (ite.hasNext()) {
            p = ite.next();
            System.out.println(p.getNombre());
            if (p.getNombre().equals(element)) {
                tipo = p.getTipo();
                System.out.println(tipo);
            } else {
                if (!tipo.equals("folder")) {
                    tipo = "root";
                }
            }
        }
        System.out.println(element);
        System.out.println("Tipo de carga: " + tipo);
        return tipo;
    }

    private void save(String nodo) {
        file f, fset;
        if (!file.isEmpty()) {
            Iterator<file> ite = file.iterator();
            while (ite.hasNext()) {
                f = ite.next();
                if (f.name.equalsIgnoreCase(nodo.toString())) {
                    fset = file.get(file.indexOf(f));
                    file.set(file.indexOf(f), new file(fset.getName(), contenido.getText()));
                    nodoAux = nodoSeleccionado;
                    textoAux = fset.getContent();
                }
            }
        }
    }

    private int findfile(String get) {
        file f;
        int ff = -1;
        if (!file.isEmpty()) {
            Iterator<file> ite = file.iterator();
            while (ite.hasNext()) {
                f = ite.next();
                if (f.name.equalsIgnoreCase(get)) {
                    ff = file.indexOf(f);
                }
            }
        }
        return ff;
    }

    public void buscarTexto() {

        hilit.removeAllHighlights();
        String s = txtbuscar.getText();

        if (s.length() > 0) {
            String contenido1 = contenido.getText();
            int index = 0;
            while (index >= 0) {
                try {
                    index = contenido1.indexOf(s, index);
                    int end = index + s.length();
                    hilit.addHighlight(index, end, painter);
                    contenido.setCaretPosition(end);
                    txtbuscar.setBackground(colorfondodefault);
                    index += s.length();
                    //estado.setText("'" + s + "' fue encontrado. Presione ESC para finalizar la busqueda.");
                } catch (Exception e) {
                }
            } /*else {
             txtbuscar.setBackground(Color.ORANGE);
             //estado.setText("'" + s + "' no se ha encontrado. Presione ESC para finalizar la busqueda.");
             }*/

        } else {
            //estado.setText("Digite la palabra a buscar.");
        }
    }
}
